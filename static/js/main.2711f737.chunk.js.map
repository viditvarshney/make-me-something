{"version":3,"sources":["recipe.module.css","components/Recipie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipie","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipies","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipies","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipie","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,wMCmB3CC,EAlBC,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACtC,OACI,yBAAKC,UAAaC,IAAMC,QACpB,4BAAKN,GACL,4BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,4BAEKA,EAAWC,UAIxB,mCAASR,EAAT,KACA,yBAAKS,IAAKR,EAAOS,IAAI,cCuDlBC,G,MAlEH,WAEV,IAFgB,EAMeC,mBAAS,IANxB,mBAMTC,EANS,KAMCC,EAND,OAOYF,mBAAS,IAPrB,mBAOTG,EAPS,KAODC,EAPC,OAQUJ,mBAAS,UARnB,mBAQTK,EARS,KAQFC,EARE,KAUhBC,qBAAU,WACRC,MAEC,CAACH,IAEJ,IAAMG,EAAW,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OACSL,EADT,mBAdf,WAce,oBAbd,qCAYI,cACZM,EADY,gBAICA,EAASC,OAJV,OAIZC,EAJY,OAKlBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANC,2CAAH,qDAqBjB,OACE,yBAAKvB,UAAY,OACf,0BAAM0B,SATQ,SAACC,GAEjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKqBb,UAAU,eACrC,2BACEA,UAAY,aACZ6B,KAAK,OAAOC,MAASlB,EACrBmB,SAlBa,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,UAmBf,4BACE9B,UAAY,gBACZ6B,KAAK,UACH,0CAGN,yBAAK7B,UAAU,WACZU,EAASP,KAAI,SAAA8B,GAAO,OACnB,kBAAC,EAAD,CACAC,IAAOD,EAAQ/B,OAAOJ,MACtBF,MAASqC,EAAQ/B,OAAOiC,MACxBtC,SAAWoC,EAAQ/B,OAAOL,SAC1BC,MAAQmC,EAAQ/B,OAAOJ,MACvBC,YAAekC,EAAQ/B,OAAOH,qBCjDpBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.2711f737.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};","import React from 'react';\nimport style from '../recipe.module.css';\nconst Recipie = ({title, calories, image, ingredients}) => {\n    return(\n        <div className = {style.recipe}>\n            <h1>{title}</h1>\n            <ul>\n                {ingredients.map(ingredient => (\n                    <li>\n                        \n                        {ingredient.text}\n                    </li>\n                ))}\n            </ul>\n            <p>Cal: {calories} </p>\n            <img src={image} alt=\"chicken\"/>\n        </div>\n    );\n}\n\nexport default Recipie","import React, {useEffect, useState} from 'react';\nimport Recipie from \"./components/Recipie\";\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = \"b0c88e89\";\n  const APP_KEY = \"8a48ee090f0748e560af55b87c10ba41\";\n\n\n  const [recipies, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('Burger');\n\n  useEffect(() => {\n    getRecipies();\n\n  }, [query]);\n\n  const getRecipies = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    \n  }\n\n  const getSearch = (e) => {\n\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  return(\n    <div className = \"App\">\n      <form onSubmit = {getSearch} className=\"search-form\">\n        <input \n          className = \"search-bar\" \n          type=\"text\" value = {search} \n          onChange = {updateSearch}\n        />\n        <button \n          className = \"search-button\" \n          type=\"submit\">\n            <span>Search</span>\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipies.map(recipie => (\n          <Recipie\n          key = {recipie.recipe.image}\n          title = {recipie.recipe.label} \n          calories ={recipie.recipe.calories}\n          image ={recipie.recipe.image}\n          ingredients = {recipie.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}